{"ast":null,"code":"import { applyCallback } from '../../utils/applyCallback.js';\nimport { filter, filterRegExp } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is.js';\nimport { compileInlineExpression } from './utils/compileInlineExpression.js';\nvar name = 'filter';\nvar dependencies = ['typed'];\nexport var createFilterTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Attach a transform function to math.filter\n   * Adds a property transform containing the transform function.\n   *\n   * This transform adds support for equations as test function for math.filter,\n   * so you can do something like 'filter([3, -2, 5], x > 0)'.\n   */\n  function filterTransform(args, math, scope) {\n    var x, callback;\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like filter([3, -2, 5], x > 0)\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n    return filter(x, callback);\n  }\n  filterTransform.rawArgs = true;\n\n  // one based version of function filter\n  var filter = typed('filter', {\n    'Array, function': _filter,\n    'Matrix, function': function Matrix_function(x, test) {\n      return x.create(_filter(x.toArray(), test), x.datatype());\n    },\n    'Array, RegExp': filterRegExp,\n    'Matrix, RegExp': function Matrix_RegExp(x, test) {\n      return x.create(filterRegExp(x.toArray(), test), x.datatype());\n    }\n  });\n  return filterTransform;\n}, {\n  isTransformFunction: true\n});\n\n/**\n * Filter values in a callback given a callback function\n *\n * !!! Passes a one-based index !!!\n *\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\nfunction _filter(x, callback) {\n  return filter(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    return applyCallback(callback, value, [index + 1], array, 'filter');\n  });\n}","map":{"version":3,"names":["applyCallback","filter","filterRegExp","factory","isFunctionAssignmentNode","isSymbolNode","compileInlineExpression","name","dependencies","createFilterTransform","_ref","typed","filterTransform","args","math","scope","x","callback","compile","evaluate","rawArgs","_filter","Matrix_function","test","create","toArray","datatype","Matrix_RegExp","isTransformFunction","value","index","array"],"sources":["/home/eduvazquez/Documents/github/web/projects/practicas-react/node_modules/mathjs/lib/esm/expression/transform/filter.transform.js"],"sourcesContent":["import { applyCallback } from '../../utils/applyCallback.js';\nimport { filter, filterRegExp } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is.js';\nimport { compileInlineExpression } from './utils/compileInlineExpression.js';\nvar name = 'filter';\nvar dependencies = ['typed'];\nexport var createFilterTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Attach a transform function to math.filter\n   * Adds a property transform containing the transform function.\n   *\n   * This transform adds support for equations as test function for math.filter,\n   * so you can do something like 'filter([3, -2, 5], x > 0)'.\n   */\n  function filterTransform(args, math, scope) {\n    var x, callback;\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like filter([3, -2, 5], x > 0)\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n    return filter(x, callback);\n  }\n  filterTransform.rawArgs = true;\n\n  // one based version of function filter\n  var filter = typed('filter', {\n    'Array, function': _filter,\n    'Matrix, function': function Matrix_function(x, test) {\n      return x.create(_filter(x.toArray(), test), x.datatype());\n    },\n    'Array, RegExp': filterRegExp,\n    'Matrix, RegExp': function Matrix_RegExp(x, test) {\n      return x.create(filterRegExp(x.toArray(), test), x.datatype());\n    }\n  });\n  return filterTransform;\n}, {\n  isTransformFunction: true\n});\n\n/**\n * Filter values in a callback given a callback function\n *\n * !!! Passes a one-based index !!!\n *\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\nfunction _filter(x, callback) {\n  return filter(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    return applyCallback(callback, value, [index + 1], array, 'filter');\n  });\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,8BAA8B;AAC5D,SAASC,MAAM,EAAEC,YAAY,QAAQ,sBAAsB;AAC3D,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,wBAAwB,EAAEC,YAAY,QAAQ,mBAAmB;AAC1E,SAASC,uBAAuB,QAAQ,oCAAoC;AAC5E,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,qBAAqB,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACpF,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASE,eAAeA,CAACC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAE;IAC1C,IAAIC,CAAC,EAAEC,QAAQ;IACf,IAAIJ,IAAI,CAAC,CAAC,CAAC,EAAE;MACXG,CAAC,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,CAAC,CAACC,QAAQ,CAACJ,KAAK,CAAC;IACvC;IACA,IAAIF,IAAI,CAAC,CAAC,CAAC,EAAE;MACX,IAAIR,YAAY,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC,IAAIT,wBAAwB,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC9D;QACAI,QAAQ,GAAGJ,IAAI,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,CAAC,CAACC,QAAQ,CAACJ,KAAK,CAAC;MAC9C,CAAC,MAAM;QACL;QACAE,QAAQ,GAAGX,uBAAuB,CAACO,IAAI,CAAC,CAAC,CAAC,EAAEC,IAAI,EAAEC,KAAK,CAAC;MAC1D;IACF;IACA,OAAOd,MAAM,CAACe,CAAC,EAAEC,QAAQ,CAAC;EAC5B;EACAL,eAAe,CAACQ,OAAO,GAAG,IAAI;;EAE9B;EACA,IAAInB,MAAM,GAAGU,KAAK,CAAC,QAAQ,EAAE;IAC3B,iBAAiB,EAAEU,OAAO;IAC1B,kBAAkB,EAAE,SAASC,eAAeA,CAACN,CAAC,EAAEO,IAAI,EAAE;MACpD,OAAOP,CAAC,CAACQ,MAAM,CAACH,OAAO,CAACL,CAAC,CAACS,OAAO,CAAC,CAAC,EAAEF,IAAI,CAAC,EAAEP,CAAC,CAACU,QAAQ,CAAC,CAAC,CAAC;IAC3D,CAAC;IACD,eAAe,EAAExB,YAAY;IAC7B,gBAAgB,EAAE,SAASyB,aAAaA,CAACX,CAAC,EAAEO,IAAI,EAAE;MAChD,OAAOP,CAAC,CAACQ,MAAM,CAACtB,YAAY,CAACc,CAAC,CAACS,OAAO,CAAC,CAAC,EAAEF,IAAI,CAAC,EAAEP,CAAC,CAACU,QAAQ,CAAC,CAAC,CAAC;IAChE;EACF,CAAC,CAAC;EACF,OAAOd,eAAe;AACxB,CAAC,EAAE;EACDgB,mBAAmB,EAAE;AACvB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASP,OAAOA,CAACL,CAAC,EAAEC,QAAQ,EAAE;EAC5B,OAAOhB,MAAM,CAACe,CAAC,EAAE,UAAUa,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9C;IACA,OAAO/B,aAAa,CAACiB,QAAQ,EAAEY,KAAK,EAAE,CAACC,KAAK,GAAG,CAAC,CAAC,EAAEC,KAAK,EAAE,QAAQ,CAAC;EACrE,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}